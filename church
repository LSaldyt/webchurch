#!/usr/bin/env node

var sys = require('sys');
var optparse = require('optparse');
var seedrandom = require('seedrandom');

function abort(msg) {
    console.log(msg)
    process.exit(0);
}

global["evaluate"] = require('./evaluate.js').evaluate
var format_result = require("./evaluate.js").format_result;

var srcfile = process.argv.length > 2 ? process.argv[process.argv.length-1] : abort("Usage: church [OPTIONS]... [FILE]");
process.argv = process.argv.slice(0, -1);

var opts = {};

var switches = [
    ['-p', '--precompile', 'Turn on pre-compilation'],
    ['-a', '--program-args [MESSAGE]', 'Arguments to pass to program. MESSAGE is sent to Church is the `argstring` variable'],
    ['-s', '--seed [SEED]', 'Set a random-number generator seed'],
    ['-t', '--timed', 'Print out timing information'],
    ['-d', '--desugar-only', 'Apply Church desugaring without execution'],
    ['-c', '--compile-only', 'Compile to Javascript without execution'],
    ['-e', '--disable-church-errors', 'Disable special Church error checking and show Javascript errors instead']
];

var parser = new optparse.OptionParser(switches);


parser.on('precompile', function(x) {
    opts.pc = true;
});

parser.on("program-args", function(opt, value) {
    opts.argstring = value;
});

parser.on("timed", function() {
    opts.timed = true;
});

parser.on("desugar-only", function() {
    opts.desugar = true;
});

parser.on("compile-only", function() {
    opts.compile = true;
});

parser.on("disable-church-errors", function() {
    opts.disable_church_errors = true;
});

parser.on("seed", function(opt, value) {
    Math.random = seedrandom(value);
});

parser.parse(process.argv);

code = require('fs').readFileSync(srcfile, "utf8");

try {
    result = format_result(evaluate(code, opts));
    console.log(result);
} catch (e) {
    console.log(e.message)
    throw e
}
